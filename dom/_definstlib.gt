package gt

func new__T__Def(id string) (me *__T__Def) {
	me = &__T__Def{}
	me.Id = id
	me.BaseSync.init()
	me.Init()
	return
}

//	Returns "the default __T__Inst instance" referencing this __T__Def definition.
//	That instance is created once when this method is first called on me,
//	and will have its Def field readily set to me.
func (me *__T__Def) DefaultInst() (inst *__T__Inst) {
	if inst = default__T__Insts[me]; inst == nil {
		inst = me.NewInst()
		default__T__Insts[me] = inst
	}
	return
}

//	Creates and returns a new __T__Inst instance referencing this __T__Def definition.
//	Any __T__Inst created by this method will have its Def field readily set to me.
func (me *__T__Def) NewInst() (inst *__T__Inst) {
	inst = &__T__Inst{Def: me}
	inst.DefRef = RefId(me.Id)
	inst.Init()
	return
}

//	If me is "dirty" or me.Def is nil, sets me.Def to the correct __T__Def
//	according to the current me.DefRef value (by searching All__T__DefLibs).
//	Then returns me.Def.
//	(Note, every __T__Inst's Def is nil initially, unless it was created via __T__Def.NewInst().)
func (me *__T__Inst) EnsureDef() *__T__Def {
	if (me.Def == nil) || me.dirty {
		me.Def = me.DefRef.__T__Def()
	}
	return me.Def
}

var (
	//	A hash-table that contains Lib__T__Defs libraries associated by their Id.
	All__T__DefLibs = Libs__T__Def{}

	//	The "default" Lib__T__Defs library for __T__Defs.
	__T__Defs = All__T__DefLibs.AddNew("")

	default__T__Insts = map[*__T__Def]*__T__Inst{}
)

func init() {
	syncHandlers = append(syncHandlers, func() {
		for _, lib := range All__T__DefLibs {
			lib.SyncChanges()
		}
	})
}

//	Searches (all Lib__T__Defs contained in All__T__DefLibs) for the __T__Def
//	whose Id is referenced by me, returning the first match found.
func (me RefId) __T__Def() (def *__T__Def) {
	id := me.S()
	for _, lib := range All__T__DefLibs {
		if def = lib.M[id]; def != nil {
			return
		}
	}
	return
}

//	The underlying type of the global All__T__DefLibs variable:
//	a hash-table that contains Lib__T__Defs libraries associated by their Id.
type Libs__T__Def map[string]*Lib__T__Defs

//	Creates a new Lib__T__Defs library with the specified Id, adds it to this Libs__T__Def, and returns it.
//	If this Libs__T__Def already contains a Lib__T__Defs library with the specified Id, does nothing and returns nil.
func (me Libs__T__Def) AddNew(id string) (lib *Lib__T__Defs) {
	if me[id] != nil {
		return
	}
	lib = me.new(id)
	me[id] = lib
	return
}

func (me Libs__T__Def) new(id string) (lib *Lib__T__Defs) {
	lib = newLib__T__Defs(id)
	return
}

//	A library that contains __T__Defs associated by their Id.
//	To create a new Lib__T__Defs library, ONLY use the Libs__T__Def.New() or Libs__T__Def.AddNew() methods.
type Lib__T__Defs struct {
	//	Id, Name
	BaseLib

	//	The underlying hash-table. NOTE -- this is for easier read-access and range-iteration:
	//	DO NOT write to M, instead use the Add(), AddNew(), Remove() methods ONLY or bugs WILL ensue.
	M map[string]*__T__Def
}

func newLib__T__Defs(id string) (me *Lib__T__Defs) {
	me = &Lib__T__Defs{M: map[string]*__T__Def{}}
	me.BaseLib.init(id)
	return
}

//	Adds the specified __T__Def definition to this Lib__T__Defs, and returns it.
//	If this Lib__T__Defs already contains a __T__Def definition with the same Id, does nothing and returns nil.
func (me *Lib__T__Defs) Add(d *__T__Def) (n *__T__Def) {
	if me.M[d.Id] == nil {
		n, me.M[d.Id] = d, d
		me.SetDirty()
	}
	return
}

//	Creates a new __T__Def definition with the specified Id, adds it to this Lib__T__Defs, and returns it.
//	If this Lib__T__Defs already contains a __T__Def definition with the specified Id, does nothing and returns nil.
func (me *Lib__T__Defs) AddNew(id string) *__T__Def { return me.Add(me.New(id)) }

//	Convenience short-hand for len(lib.M)
func (me *Lib__T__Defs) Len() int { return len(me.M) }

//	Creates a new __T__Def definition with the specified Id and returns it,
//	but does not add it to this Lib__T__Defs.
func (me *Lib__T__Defs) New(id string) (def *__T__Def) { def = new__T__Def(id); return }

//	Removes the __T__Def with the specified Id from this Lib__T__Defs.
func (me *Lib__T__Defs) Remove(id string) { delete(me.M, id); me.SetDirty() }

//	Signals to the core package (or your custom package) that changes have been made to this Lib__T__Defs
//	that need to be picked up. Call this after you have made a number of changes to this Lib__T__Defs
//	library or its __T__Def definitions. Also called by the global SyncChanges() function.
func (me *Lib__T__Defs) SyncChanges() {
	me.BaseLib.BaseSync.SyncChanges()
	for _, def := range me.M {
		def.BaseDef.BaseSync.SyncChanges()
	}
}
